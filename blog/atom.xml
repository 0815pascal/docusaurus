<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://0815pascal.github.io/docusaurus/blog</id>
    <title>Codebase Blog</title>
    <updated>2022-05-31T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://0815pascal.github.io/docusaurus/blog"/>
    <subtitle>Codebase Blog</subtitle>
    <icon>https://0815pascal.github.io/docusaurus/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[RequestDispatcher.forward() vs HttpServletResponse.sendRedirect()]]></title>
        <id>requestdispatcher-forward-vs-httpservletresponse-sendredirect</id>
        <link href="https://0815pascal.github.io/docusaurus/blog/requestdispatcher-forward-vs-httpservletresponse-sendredirect"/>
        <updated>2022-05-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is the conceptual difference between forward() and sendRedirect()?]]></summary>
        <content type="html"><![CDATA[<blockquote><p>What is the conceptual difference between <code>forward()</code> and <code>sendRedirect()</code>?</p></blockquote><p>Source: <a href="https://stackoverflow.com/questions/2047122/requestdispatcher-forward-vs-httpservletresponse-sendredirect" target="_blank" rel="noopener noreferrer">BalusC</a> In the web development world, the term "redirect" is the act of sending the client an empty HTTP response with just a <code>Location</code> header containing the new URL to which the client has to send a brand new GET request. So basically:</p><ul><li>Client sends a HTTP request to <code>some.jsp</code>.</li><li>Server sends a HTTP response back with <code>Location: other.jsp</code> header</li><li>Client sends a HTTP request to <code>other.jsp</code> (this get reflected in browser address bar!)</li><li>Server sends a HTTP response back with content of <code>other.jsp</code>.</li></ul><p>You can track it with the web browser's builtin/addon developer toolset. Press F12 in Chrome/IE9/Firebug and check the "Network" section to see it.</p><p>Exactly the above is achieved by <code>sendRedirect("other.jsp")</code>. The <code>RequestDispatcher#forward()</code> doesn't send a redirect. Instead, it uses the content of the target page as HTTP response.</p><ul><li>Client sends a HTTP request to <code>some.jsp</code>.</li><li>Server sends a HTTP response back with content of <code>other.jsp</code>.</li></ul><p>However, as the original HTTP request was to <code>some.jsp</code>, the URL in browser address bar remains unchanged. Also, any request attributes set in the controller behind <code>some.jsp</code> will be available in <code>other.jsp</code>. This does not happen during a redirect because you're basically forcing the client to create a <strong>new</strong> HTTP request on <code>other.jsp</code>, hereby throwing away the original request on <code>some.jsp</code> including all of its attribtues</p><hr><p>The <code>RequestDispatcher</code> is extremely useful in the MVC paradigm and/or when you want to hide JSP's from direct access. You can put JSP's in the <code>/WEB-INF</code> folder and use a <code>Servlet</code> which controls, preprocesses and postprocesses the requests. The JSPs in the <code>/WEB-INF</code> folder are not directly accessible by URL, but the Servlet can access them using <code>RequestDispatcher#forward()</code>.</p><p>You can for example have a JSP file in <code>/WEB-INF/login.jsp</code> and a <code>LoginServlet</code> which is mapped on an <code>url-pattern</code> of <code>/login</code>. When you invoke <code>http://example.com/context/login</code>, then the servlet's <code>doGet()</code> will be invoked. You can do any <em>pre</em>processing stuff in there and finally <strong>forward</strong> the request like:</p><div class="language-Java codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-Java codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain">request.getRequestDispatcher("/WEB-INF/login.jsp").forward(request, response);</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>When you submit a form, you normally want to use <code>POST</code>:</p><div class="language-html codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-html codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">form</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">action</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">login</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">method</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">post</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This way the servlet's <code>doPost()</code> will be invoked and you can do any postprocessing stuff in there (e.g. validation, business logic, login the user, etc).</p><p>If there are any errors, then you normally want to <strong>forward</strong> the request back to the same page and display the errors there next to the input fields and so on. You can use the <code>RequestDispatcher</code> for this.</p><p>If a <code>POST</code> is successful, you normally want to <strong>redirect</strong> the request, so that the request won't be resubmitted when the user refreshes the request (e.g. pressing F5 or navigating back in history).</p><div class="language-java codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-java codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token plain">User user = userDAO.find(username, password);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (user != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    request.getSession().setAttribute("user", user); // Login user.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    response.sendRedirect("home"); // Redirects to &lt;http://example.com/context/home&gt; after succesful login.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    request.setAttribute("error", "Unknown login, please try again."); // Set error.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    request.getRequestDispatcher("/WEB-INF/login.jsp").forward(request, response); // Forward to same page so that you can display error.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>A <strong>redirect</strong> thus instructs the client to fire a new <code>GET</code> request on the given URL. Refreshing the request would then only refresh the redirected request and not the initial request. This will avoid "double submits" and confusion and bad user experiences. This is also called the <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get" target="_blank" rel="noopener noreferrer">POST-Redirect-GET pattern</a>.</p><hr><h3 class="anchor anchorWithStickyNavbar_mojV" id="requestdispatcher---forward-method">requestDispatcher - forward() method<a class="hash-link" href="#requestdispatcher---forward-method" title="Direct link to heading">​</a></h3><ol><li><p>When we use the <code>forward</code> method, the request is transferred to another resource within the same server for further processing.</p></li><li><p>In the case of <code>forward</code>, the web container handles all processing internally and the client or browser is not involved.</p></li><li><p>When <code>forward</code> is called on the <code>requestDispatcherobject</code>, we pass the request and response objects, so our old request object is present on the new resource which is going to process our request.</p></li><li><p>Visually, we are not able to see the forwarded address, it is transparent.</p></li><li><p>Using the <code>forward()</code> method is faster than <code>sendRedirect</code>.</p></li><li><p>When we redirect using forward, and we want to use the same data in a new resource, we can use <code>request.setAttribute()</code> as we have a request object available.</p></li></ol><h3 class="anchor anchorWithStickyNavbar_mojV" id="sendredirect">SendRedirect<a class="hash-link" href="#sendredirect" title="Direct link to heading">​</a></h3><ol><li><p>In case of <code>sendRedirect</code>, the request is transferred to another resource, to a different domain, or to a different server for further processing.</p></li><li><p>When you use <code>sendRedirect</code>, the container transfers the request to the client or browser, so the URL given inside the <code>sendRedirect</code> method is visible as a new request to the client.</p></li><li><p>In case of <code>sendRedirect</code> call, the old request and response objects are lost because it’s treated as new request by the browser.</p></li><li><p>In the address bar, we are able to see the new redirected address. It’s not transparent.</p></li><li><p><code>sendRedirect</code> is slower because one extra round trip is required, because a completely new request is created and the old request object is lost. Two browser request are required.</p></li><li><p>But in <code>sendRedirect</code>, if we want to use the same data for a new resource we have to store the data in session or pass along with the URL.</p></li></ol><h3 class="anchor anchorWithStickyNavbar_mojV" id="which-one-is-good">Which one is good?<a class="hash-link" href="#which-one-is-good" title="Direct link to heading">​</a></h3><p>Its depends upon the scenario for which method is more useful.</p><p>If you want control is transfer to new server or context, and it is treated as completely new task, then we go for <code>sendRedirect</code>. Generally, a forward should be used if the operation can be safely repeated upon a browser reload of the web page and will not affect the result.</p><p>Source: <a href="https://stackoverflow.com/a/19289165/4146792" target="_blank" rel="noopener noreferrer">Abhijeet Ashok Muneshwar</a> / <a href="https://javarevisited.blogspot.com/2011/09/sendredirect-forward-jsp-servlet.html" target="_blank" rel="noopener noreferrer">Javarevisited</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="see-also">See also<a class="hash-link" href="#see-also" title="Direct link to heading">​</a></h3><ul><li><a href="https://stackoverflow.com/questions/3106452/how-do-servlets-work-instantiation-sessions-shared-variables-and-multithreadi" target="_blank" rel="noopener noreferrer">How do servlets work? Instantiation, sessions, shared variables and multithreading</a></li><li><a href="https://stackoverflow.com/questions/2349633/doget-and-dopost-in-servlets" target="_blank" rel="noopener noreferrer">doGet and doPost in Servlets</a></li><li><a href="https://stackoverflow.com/questions/6464931/how-perform-validation-and-display-error-message-in-same-form-in-jsp" target="_blank" rel="noopener noreferrer">How perform validation and display error message in same form in JSP?</a></li><li><a href="https://stackoverflow.com/questions/9034149/httpservletresponse-sendredirect-permanent" target="_blank" rel="noopener noreferrer">HttpServletResponse sendRedirect permanent</a></li></ul>]]></content>
        <author>
            <name>Pascal</name>
            <uri>https://github.com/0815pascal</uri>
        </author>
        <category label="Java" term="Java"/>
        <category label="Servlets" term="Servlets"/>
        <category label="JSP" term="JSP"/>
        <category label="Redirect" term="Redirect"/>
        <category label="Forward" term="Forward"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>welcome</id>
        <link href="https://0815pascal.github.io/docusaurus/blog/welcome"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/docusaurus/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_E7b_"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content>
        <author>
            <name>Sébastien Lorber</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <author>
            <name>Yangshun Tay</name>
            <uri>https://github.com/yangshun</uri>
        </author>
        <category label="facebook" term="facebook"/>
        <category label="hello" term="hello"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>mdx-blog-post</id>
        <link href="https://0815pascal.github.io/docusaurus/blog/mdx-blog-post"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></summary>
        <content type="html"><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</h5></div><div class="admonition-content"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_MPoW theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-js codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'button clicked!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div>]]></content>
        <author>
            <name>Sébastien Lorber</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Long Blog Post]]></title>
        <id>long-blog-post</id>
        <link href="https://0815pascal.github.io/docusaurus/blog/long-blog-post"/>
        <updated>2019-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is the summary of a very long blog post,]]></summary>
        <content type="html"><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content>
        <author>
            <name>Endilie Yacop Sucipto</name>
            <uri>https://github.com/endiliey</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>